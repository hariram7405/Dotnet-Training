Phase2IssueTracker - 
===================

Overview
--------
Phase2IssueTracker is a simple console-based issue tracking system written in C#.
It models different types of issues (Bug, WorkTask, FeatureRequest), supports status updates,
displays details, and generates reports.

---

Project Structure
-----------------
- Program.cs                : Main program entry point
- Models/
  - Issue.cs                : Base class for issues
  - Bug.cs                  : Bug issue class (inherits Issue, implements IReportable)
  - WorkTask.cs             : WorkTask issue class (inherits Issue, implements IReportable)
  - FeatureRequest.cs       : FeatureRequest issue class (inherits Issue, implements IReportable)
  - IReportable.cs          : Interface for reporting functionality

---

Interface: IReportable.cs
-------------------------
namespace Phase2IssueTracker.Models
{
    public interface IReportable
    {
        void ReportStatus();
        void GetSummary();
    }
}

---

Class: Issue.cs
---------------
Base class for all issues. Manages common properties and status.

using System;
using System.Collections.Generic;

namespace Phase2IssueTracker.Models
{
    public class Issue
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Assignedto { get; set; }
        public string status { get; private set; }

        public Issue(int id, string title, string assignedto)
        {
            if (string.IsNullOrWhiteSpace(title)) throw new ArgumentNullException("Title cannot be empty");
            if (string.IsNullOrWhiteSpace(assignedto)) throw new ArgumentNullException("AssignedTo cannot be empty");

            Id = id;
            Title = title;
            Assignedto = assignedto;
            status = "Open";
        }

        public virtual void Display()
        {
            Console.WriteLine($"Issue #{Id}: {Title} | Assigned to {Assignedto} | Status: {status}");
        }

        public void changeStatus(string newStatus)
        {
            List<string> validStatus = new List<string> { "Open", "In Progress", "Closed", "Resolved" };
            if (validStatus.Contains(newStatus))
            {
                status = newStatus;
                Console.WriteLine($"Status changed to {newStatus} successfully.");
            }
            else
            {
                Console.WriteLine("Status is invalid.");
            }
        }
    }
}

---

Class: Bug.cs
-------------
Represents a bug with severity.

using System;

namespace Phase2IssueTracker.Models
{
    public class Bug : Issue, IReportable
    {
        public string Severity { get; set; }

        public Bug(int id, string title, string assignedto, string status, string severity)
            : base(id, title, assignedto)
        {
            Severity = severity;
            changeStatus(status); // Initialize status properly
        }

        public override void Display()
        {
            Console.WriteLine($"[BUG] #{Id}: {Title} | Severity: {Severity} | Assigned to: {Assignedto} | Status: {status}");
        }

        public void ReportStatus()
        {
            Console.WriteLine($"Bug #{Id} is under investigation. It is still in progress.");
        }

        public void GetSummary()
        {
            Console.WriteLine("Summary");
            Console.WriteLine("------------------------");
            Console.WriteLine($"Bug Id: {Id}");
            Console.WriteLine($"Bug Title: {Title}");
            Console.WriteLine($"Bug Severity: {Severity}");
            Console.WriteLine($"Bug AssignedTo: {Assignedto}");
            Console.WriteLine($"Bug Status: {status}");
            Console.WriteLine($"Summary Generated on: {DateTime.Now}");
        }
    }
}

---

Class: WorkTask.cs
------------------
Represents a work task with estimated hours.

using System;

namespace Phase2IssueTracker.Models
{
    public class WorkTask : Issue, IReportable
    {
        public int EstimatedHours { get; set; }

        public WorkTask(int id, string title, string assignedTo, int estimatedHours)
            : base(id, title, assignedTo)
        {
            EstimatedHours = estimatedHours;
        }

        public override void Display()
        {
            Console.WriteLine($"[Task] #{Id}: {Title} | Estimated Hours: {EstimatedHours} | Assigned to: {Assignedto} | Status: {status}");
        }

        public void ReportStatus()
        {
            Console.WriteLine($"Task #{Id} is in progress. Estimated time: {EstimatedHours} hours.");
        }

        public void GetSummary()
        {
            Console.WriteLine("Summary");
            Console.WriteLine("------------------------");
            Console.WriteLine($"Task Id: {Id}");
            Console.WriteLine($"Task Title: {Title}");
            Console.WriteLine($"Task AssignedTo: {Assignedto}");
            Console.WriteLine($"Task Status: {status}");
            Console.WriteLine($"Task EstimationTime: {EstimatedHours} hours");
            Console.WriteLine($"Summary Generated on: {DateTime.Now}");
        }
    }
}

---

Class: FeatureRequest.cs
------------------------
Represents a feature request with requested by and release date info.

using System;

namespace Phase2IssueTracker.Models
{
    public class FeatureRequest : Issue, IReportable
    {
        public string requestedBy;
        public string releaseDate;

        public FeatureRequest(int id, string title, string assignedto, string status, string requestedBy, string releaseDate)
            : base(id, title, assignedto)
        {
            this.requestedBy = requestedBy;
            this.releaseDate = releaseDate;
            changeStatus(status); // Initialize status properly
        }

        public override void Display()
        {
            Console.WriteLine($"[Feature] #{Id}: {Title} | Assigned to: {Assignedto} | Requested By: {requestedBy} | Release Date: {releaseDate} | Status: {status}");
        }

        public void ReportStatus()
        {
            Console.WriteLine($"Feature Request #{Id} is ongoing. It is still in progress.");
        }

        public void GetSummary()
        {
            Console.WriteLine("Summary");
            Console.WriteLine("------------------------");
            Console.WriteLine($"Feature Id: {Id}");
            Console.WriteLine($"Feature Title: {Title}");
            Console.WriteLine($"Feature AssignedTo: {Assignedto}");
            Console.WriteLine($"Feature Status: {status}");
            Console.WriteLine($"Feature RequestedBy: {requestedBy}");
            Console.WriteLine($"Feature ReleaseDate: {releaseDate}");
            Console.WriteLine($"Summary Generated on: {DateTime.Now}");
        }
    }
}

---

Main Program: Program.cs
------------------------
Entry point to create, manage, and display issues.

using System;
using System.Collections.Generic;
using Phase2IssueTracker.Models;

namespace Phase2IssueTracker
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Issue> issues = new List<Issue>();

            Bug bug1 = new Bug(1, "App crashes on login", "Ravi", "Open", "Critical");
            WorkTask task1 = new WorkTask(2, "Page not loading", "Anita", 6);
            FeatureRequest feature1 = new FeatureRequest(3, "Resolve UI feature issue", "Lokesh", "Open", "Sunil", "7hours");

            issues.Add(bug1);
            issues.Add(task1);
            issues.Add(feature1);

            Console.WriteLine("Changing bug1 status to Closed:");
            bug1.changeStatus("Closed");

            // Initialize counters
            int openCount = 0, closedCount = 0, inProgressCount = 0, resolvedCount = 0;

            foreach (Issue issue in issues)
            {
                issue.Display();

                if (issue is IReportable reportable)
                {
                    reportable.ReportStatus();
                    reportable.GetSummary();
                }

                switch (issue.status)
                {
                    case "Open": openCount++; break;
                    case "Closed": closedCount++; break;
                    case "In Progress": inProgressCount++; break;
                    case "Resolved": resolvedCount++; break;
                }

                Console.WriteLine();
            }

            Console.WriteLine("Summary of Tickets by Status:");
            Console.WriteLine("----------------------------");
            Console.WriteLine($"Open Tickets: {openCount}");
            Console.WriteLine($"Closed Tickets: {closedCount}");
            Console.WriteLine($"In Progress Tickets: {inProgressCount}");
            Console.WriteLine($"Resolved Tickets: {resolvedCount}");
            Console.WriteLine();

            Console.WriteLine("Changing feature1 status to Resolved:");
            feature1.changeStatus("Resolved");
        }
    }
}

---

Usage
-----
- Compile and run Program.cs
- It creates 3 issues: a Bug, a WorkTask, and a FeatureRequest.
- Status of bug1 is changed to "Closed"
- All issues are displayed with detailed info
- Status counts of tickets are printed
- Finally, feature1 status is changed to "Resolved"

---

Notes
-----
- changeStatus validates only predefined statuses: "Open", "In Progress", "Closed", "Resolved"
- Classes implementing IReportable provide detailed reporting functionality
- Easily extensible with new issue types by inheriting from Issue and implementing IReportable if needed

---

End of Documentation
